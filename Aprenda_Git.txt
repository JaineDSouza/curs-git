Criar um repositório

O primeiro passo para trabalhar com Git é criar um repositório.

Para isso, basta rodar o comando git init NOME_DO_REPOSITORIO.

Exemplo:

git init games cria a pasta chamada games, que é um repositório Git.

__________________________________________________________

Adicionar arquivos
Do ponto do vista do Git, existem quatro estados no qual um determinado arquivo pode estar.

Commited: O arquivo está sob controle de versão e não apresenta nenhuma modificação.
Commit candidate: Caso você crie um conjunto de modificações (commit), esses serão os arquivos incluídos.
Modified: Arquivos que foram modificados.
Untracked: Arquivos novos, que ainda não estão no controle de versão.
Para mudar um arquivo de untracked ou modified para Commit candidate, você usa o comando git add CAMINHO.

O git add é inteligente, então se você passar um caminho parcial para ele, ele muda o estado de todos os arquivos que contiverem esse caminho parcial.

Exemplo:

git add . mudaria o estado de todos os arquivos a partir do diretório atual.
git add arquivo.txt mudaria o estado do arquivo arquivo.txt
git add pasta mudaria o estado do arquivo pasta/arq1.txt e do pasta/arq2.txt, mas não mudaria do outra_pasta/arq1.txt

__________________________________________________________

Fazer Commits
Agora que você já sabe como selecionar as modificações que quer incluir em um pacote de modificações (um commit), chegou a hora de aprender como gerar esse pacote.

O comando utilizado para criar um commit em git é git commit. Com esse comando, todos os arquivos que estiverem marcados como Commit candidate serão incluídos no commit.

Se você também quiser incluir os arquivos que estão marcados como modified, você pode incluir a flag -a.

Uma coisa muito importante de qualquer commit é uma mensagem que explique o que significa aquele commit. Para isso, você pode passar a opção -m "mensagem de commit". Caso você não passe, o git vai abrir um editor de texto para que você digite a mensagem.

Exemplo:

git commit -m "commit" cria um commit com todos os Commit candidate e a mensagem commit
git commit -a -m "segundo commit" cria um commit com os arquivos marcados como Commit candidate e os modified e junta com a mensagem segundo commit

__________________________________________________________

Criar Branches
Nos últimos exercícios você deve ter notado que seus commits ficaram em um lugar chamado master.

Esse master é um branch que o git cria automagicamente quando você faz um commit sem estar em nenhum branch (como é o caso de um repositório recém criado).

Quando usamos Git, quase todas as operações são feitas dentro de um branch. Um branch nada mais é que uma lista de commits. Você pode criar, apagar e renomear branches.

Para criar você usa o comando git branch NOME_DO_BRANCH. Para apagar git branch -D NOME_DO_BRANCH. E para renomear você usa git branch -m NOME_ANTIGO NOME_NOVO.

Exemplo:

git branch work cria o branch work
git branch -D work apaga o branch work
git branch -m work asdrubal renomeia o branch work para asdrubal

__________________________________________________________

Mudar de branch ativo
Agora que você já sabe criar novos branches, podemos começar a trabalhar nesses branches criados.

Para você mudar o branch ativo (branch onde são colocados os seus commits), você usa o comando git checkout

Exemplo:

git checkout work muda para o branch work que você tenha criado previamente.

Como é muito comum querer criar e mudar para o branch novo, você pode usar a flag -b para o git criar o branch automaticamente.

Exemplo:

git checkout -b asdrubal cria o branch asdrubal e coloca ele como ativo.

__________________________________________________________

Merge de branches
Como sempre trabalhamos com branches, uma operação muito útil é juntar código de branches diferentes.

No Git, uma das formas de se fazer isso é o Merge e o comando para fazer o merge é git merge BRANCH_DE_ORIGEM.

O Merge vai olhar para as duas branches (a atual e a de origem), encontrar a base comum (quais os commits que ambas tem) e vai aplicar os commits que a branch atual não tem por cima dos commits que estão nela.

Caso existam commits na branch atual que não fazem parte da base, ele cria automaticamente um commit de merge.

Exemplo:

git merge work moverá todos os commits (acima da base) da branch work para a branch atual.

__________________________________________________________

Rebase de branches
Outra forma de mover commits de um branch para o outro é o Rebase.

O Rebase funciona de forma muito semelhante ao Merge. A diferença é a ordem em que os commits são aplicados.

No Merge, os commits do outro branch são aplicados por cima dos commits do branch atual.

No Rebase, os seus commits (acima da base) são temporariamente apagados, o branch atual fica exatamente igual ao outro branch e seus commits são aplicados um a um no branch atual.

Uma das vantagens disso é que dessa forma, você consegue manter um histórico organizado.

Para fazer o Rebase, você usa o comando git rebase BRANCH_DE_ORIGEM.

Exemplo:

git rebase master moverá todos os commits (acima da base) da branch master para a branch atual, mas abaixo dos seus commits acima da base.

__________________________________________________________

Enviar commits para branches remotos (Push)
Para facilitar com que outras pessoas utilizem e colaborem com o seu código, uma operação muito comum é enviar as suas modificações para um branch em um servidor remoto (em geral chamado de origin)

Esse servidor remote pode ser um simples repositório Git em uma máquina acessível a todos os membros do time.

Para enviar os commits do seu branch atual para o servidor remoto você usa o comando git push REPO_REMOTO BRANCH.

É muito importante que a base do seu branch atual seja o último commit que está no repositório remoto. Se isso não acontecer, seu Push será negado.

Exemplo:

git push origin master envia os commits do seu branch atual para o branch master do repositório origin

__________________________________________________________

Pegar commits de branches remotos (Pull)
Para trazer commits de um repositório remoto você usa o comando git pull REPO_REMOTO BRANCH.

O Pull funciona de forma muito parecido com o Merge, mas ele serve para branches remotos.

Exemplo:

git pull origin master pega os commits do branch master do servidor remoto origin e aplica ao seu branch atual.

__________________________________________________________

Git Workflow
Uma das principais mudanças que acontecem quando você passa a usar Git é que o seu fluxo de trabalho muda.

Um fluxo de trabalho muito comum com Git funciona da seguinte forma:

Checkout para o seu branch de trabalho
Programar e fazer vários pequenos commits
Pegar as modificações que outros programadores tenham feito
Rebase no seu branch de trabalho (para manter o histórico linear)
Enviar as modificações para o servidor remoto
São bem mais passos do que se você utilizar Svn, por exemplo, mas é um fluxo muito mais flexivel. E depois que você se acostuma, você faz o fluxo automaticamente.
